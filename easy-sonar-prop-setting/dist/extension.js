"use strict";var j=Object.create;var S=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var W=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty;var R=(t,n)=>{for(var a in n)S(t,a,{get:n[a],enumerable:!0})},x=(t,n,a,u)=>{if(n&&typeof n=="object"||typeof n=="function")for(let c of N(n))!L.call(t,c)&&c!==a&&S(t,c,{get:()=>n[c],enumerable:!(u=M(n,c))||u.enumerable});return t};var w=(t,n,a)=>(a=t!=null?j(W(t)):{},x(n||!t||!t.__esModule?S(a,"default",{value:t,enumerable:!0}):a,t)),q=t=>x(S({},"__esModule",{value:!0}),t);var D={};R(D,{activate:()=>z,deactivate:()=>B});module.exports=q(D);var s=w(require("vscode")),l=w(require("fs")),f=w(require("path"));function z(t){console.log('Congratulations, your extension "easy-sonar-prop-setting" is now active!');let n=(r,o,e=!1)=>{let i=s.workspace.workspaceFolders;if(!i){s.window.showErrorMessage("No workspace folder is open");return}let y=r.fsPath,A=i.find(T=>y.startsWith(T.uri.fsPath));if(!A){s.window.showErrorMessage("Selected path is not within any workspace folder");return}let C=A.uri.fsPath,h=s.workspace.getConfiguration("easySonarPropSetting").get("propertiesFileName","sonar-project.properties"),m=f.join(C,h),d=`./${f.relative(C,y)}`.replace(/\\/g,"/");if(l.existsSync(m)){let k=l.readFileSync(m,"utf-8").split(`
`),g=[],b=!1;for(let p of k)if(p.startsWith(`${o}=`)||p.startsWith(`${o} =`))if(b=!0,e)g.push(`${o} = ${d}`);else{let v=p.includes("=")?p.split("=")[1].split(",").map(F=>F.trim()):[];if(!v.includes(d))v.push(d),g.push(`${o} = ${v.join(", ")}`);else{s.window.showErrorMessage(`${d} is already in ${o}`);return}}else g.push(p);b||g.push(`${o} = ${d}`),l.writeFileSync(m,g.join(`
`)),s.window.showInformationMessage(`${o} set to ${d}`)}else s.window.showErrorMessage(`${h} file not found in the root path`)},a=s.commands.registerCommand("easy-sonar-prop-setting.addSonarSources",r=>{let e=s.workspace.getConfiguration("easySonarPropSetting").get("sonarSourcesKey","sonar.sources");n(r,e)}),u=s.commands.registerCommand("easy-sonar-prop-setting.addSonarTests",r=>{let e=s.workspace.getConfiguration("easySonarPropSetting").get("sonarTestsKey","sonar.tests");n(r,e)}),c=s.commands.registerCommand("easy-sonar-prop-setting.clearAndAddSonarSources",r=>{let o=s.workspace.getConfiguration("easySonarPropSetting"),e=o.get("sonarSourcesKey","sonar.sources"),i=o.get("enableClearAndAddSonarSources",!0);n(r,e,i)}),P=s.commands.registerCommand("easy-sonar-prop-setting.clearAndAddSonarTests",r=>{let o=s.workspace.getConfiguration("easySonarPropSetting"),e=o.get("sonarTestsKey","sonar.tests"),i=o.get("enableClearAndAddSonarTests",!0);n(r,e,i)}),K=s.commands.registerCommand("easy-sonar-prop-setting.addSonarTestInclusions",r=>{let e=s.workspace.getConfiguration("easySonarPropSetting").get("sonarTestInclusionsKey","sonar.test.inclusions");n(r,e)}),$=s.commands.registerCommand("easy-sonar-prop-setting.clearAndAddSonarTestInclusions",r=>{let o=s.workspace.getConfiguration("easySonarPropSetting"),e=o.get("sonarTestInclusionsKey","sonar.test.inclusions"),i=o.get("enableClearAndAddSonarTestInclusions",!0);n(r,e,i)}),E=s.commands.registerCommand("easy-sonar-prop-setting.addSonarExclusions",r=>{let e=s.workspace.getConfiguration("easySonarPropSetting").get("sonarExclusionsKey","sonar.exclusions");n(r,e)}),I=s.commands.registerCommand("easy-sonar-prop-setting.clearAndAddSonarExclusions",r=>{let o=s.workspace.getConfiguration("easySonarPropSetting"),e=o.get("sonarExclusionsKey","sonar.exclusions"),i=o.get("enableClearAndAddSonarExclusions",!1);n(r,e,i)}),U=s.commands.registerCommand("easy-sonar-prop-setting.runSonarScanner",r=>{let o=r.fsPath.replace(/\\/g,"/").replace(/\/sonar-project\.properties$/,""),e=s.window.createTerminal("Sonar Scanner");e.show(),e.sendText(`cd ${o}`),e.sendText("sonar-scanner")});t.subscriptions.push(a,u,c,P,K,$,E,I,U)}function B(){}0&&(module.exports={activate,deactivate});
